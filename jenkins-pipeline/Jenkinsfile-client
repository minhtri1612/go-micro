pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        ECR_REGISTRY = '675613596870.dkr.ecr.ap-southeast-2.amazonaws.com'
        ECR_REPOSITORY = 'client'
        IMAGE_TAG = "${BUILD_NUMBER}"
        EKS_CLUSTER_NAME = 'staging-demo-eks-cluster'
        EKS_CLUSTER_ENDPOINT = 'https://staging-demo-eks-cluster.cluster-675613596870.ap-southeast-2.eks.amazonaws.com'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Building Client (React Frontend) - Build #${BUILD_NUMBER}"
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${ECR_REPOSITORY}:${IMAGE_TAG}", "./client")
                    echo "Docker image built: ${ECR_REPOSITORY}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    '''
                }
            }
        }
        
        stage('Tag and Push to ECR') {
            steps {
                script {
                    sh '''
                        docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                        docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                    '''
                    echo "Pushed image to ECR: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Update EKS Deployment') {
            steps {
                script {
                    sh '''
                        # Configure kubectl for EKS
                        aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER_NAME}
                        
                        # Update the deployment with new image
                        kubectl set image deployment/client client=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} -n default
                        
                        # Wait for rollout to complete
                        kubectl rollout status deployment/client -n default --timeout=300s
                    '''
                    echo "Successfully deployed Client to EKS"
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    sh '''
                        # Check if deployment is ready
                        kubectl get pods -l app=client -n default
                        kubectl get services -l app=client -n default
                        
                        # Get deployment status
                        kubectl describe deployment client -n default
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images to save space
            sh 'docker rmi ${ECR_REPOSITORY}:${IMAGE_TAG} || true'
            sh 'docker rmi ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} || true'
        }
        
        success {
            echo "‚úÖ Client pipeline completed successfully!"
            echo "üöÄ Frontend deployed at: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
        }
        
        failure {
            echo "‚ùå Client pipeline failed!"
        }
    }
}
