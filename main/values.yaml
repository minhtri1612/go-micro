# Go Microservices E-commerce Application Configuration

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Namespace for all resources
namespace: "go-micro"

# Database configurations
product-db:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    postgresPassword: "canh177"
    database: "products_db"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5432

inventory-db:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    postgresPassword: "postgres"
    database: "inventory_db"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5432

order-db:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    postgresPassword: "postgres"
    database: "order_db"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5432

payment-db:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    postgresPassword: "postgres"
    database: "payment_db"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5432

notification-db:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    postgresPassword: "postgres"
    database: "notification_db"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5432

# Message Queue & Cache
rabbitmq:
  enabled: true
  image:
    repository: rabbitmq
    tag: "3-management"
    pullPolicy: IfNotPresent
  auth:
    username: "admin"
    password: "admin"
  persistence:
    enabled: true
    size: 8Gi
  service:
    type: ClusterIP
    port: 5672
    managementPort: 15672

redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  auth:
    enabled: false
  persistence:
    enabled: true
    size: 4Gi
  service:
    type: ClusterIP
    port: 6379

# Microservices
product-service:
  enabled: true
  image:
    repository: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/product-service
    tag: "latest"
    pullPolicy: IfNotPresent
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: false
  env:
    DB_HOST: "product-db"
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "product_db"

inventory-service:
  enabled: true
  image:
    repository: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/inventory-service
    tag: "latest"
    pullPolicy: IfNotPresent
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8082
  ingress:
    enabled: false
  env:
    DB_HOST: "inventory-db"
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "inventory_db"

order-service:
  enabled: true
  workload:
    image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/order-service
    tag: "latest"
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8083
  ingress:
    enabled: false
  orderService:
    database:
      host: "order-db"
      port: "5432"
      name: "order_db"
      user: "postgres"
    redis:
      host: "redis"
      port: "6379"
    rabbitmq:
      host: "rabbitmq"
      port: "5672"
  env:
    DB_HOST: "order-db"
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "order_db"
    REDIS_HOST: "redis"
    REDIS_PORT: "6379"
    RABBITMQ_HOST: "rabbitmq"
    RABBITMQ_PORT: "5672"
    RABBITMQ_USER: "admin"
    RABBITMQ_PASSWORD: "admin"

payment-service:
  enabled: true
  workload:
    image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/payment-service
    tag: "latest"
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8084
  ingress:
    enabled: false
  env:
    DB_HOST: "payment-db"
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "payment_db"

noti-service:
  enabled: true
  workload:
    image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/notification-service
    tag: "latest"
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8085
  ingress:
    enabled: false
  env:
    DB_HOST: "notification-db"
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PASSWORD: "postgres"
    DB_NAME: "notification_db"

# API Gateway
api-gateway:
  enabled: true
  workload:
    image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/api-gateway
    tag: "latest"
  replicaCount: 2
  service:
    type: ClusterIP
    port: 8089
  ingress:
    enabled: true
    className: "alb"
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/healthcheck-path: /health
      alb.ingress.kubernetes.io/group.name: go-micro-app
    hosts:
      - host: api.yourdomain.com
        paths:
          - path: /api
            pathType: Prefix
  env:
    PRODUCT_SERVICE_URL: "http://product-service:8081"
    INVENTORY_SERVICE_URL: "http://inventory-service:8082"
    ORDER_SERVICE_URL: "http://order-service:8083"
    PAYMENT_SERVICE_URL: "http://payment-service:8084"
    NOTIFICATION_SERVICE_URL: "http://noti-service:8085"

# Frontend Client
client:
  enabled: true
  workload:
    image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/client
    tag: "latest"
  replicaCount: 2
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    className: "alb"
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/healthcheck-path: /
      alb.ingress.kubernetes.io/group.name: go-micro-app
    hosts:
      - host: yourdomain.com
        paths:
          - path: /
            pathType: Prefix
  env:
    VITE_API_URL: ""