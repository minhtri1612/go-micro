replicaCount: 2 # Matches noti-service replica count

httpRoute:
  enabled: false # Disable HTTPRoute because Gateway API CRDs are not installed
  annotations: {}
  parentRefs:
    - name: external-gateway # Assuming this is your central Istio/Envoy gateway
      namespace: istio-ingress

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

app:
  namespace: go-micro # Assuming deployment in the same namespace

# Container and Resource Configuration
workload:
  # IMPORTANT: Replace with your actual ECR path for the API Gateway image
  image: 398045402467.dkr.ecr.ap-southeast-2.amazonaws.com/api-gateway
  tag: "latest" 
  resources:
    requests:
      memory: 256Mi
      cpu: 128m
    limits:
      memory: 512Mi
      cpu: 500m
  ports:
    containerPort: 8000 # The port EXPOSEd in your API Gateway Dockerfile

# Environment Variables for Internal Service Discovery (as used in main.go)
env:

  PRODUCT_SERVICE_URL: http://go-micro-product-service:80
  ORDER_SERVICE_URL: http://go-micro-order-service:80
  INVENTORY_SERVICE_URL: http://go-micro-inventory-service:80
  NOTIFICATION_SERVICE_URL: http://go-micro-noti-service:80
  PAYMENT_SERVICE_URL: http://go-micro-payment-service:80 # PORT is now managed by the deployment spec

# Kubernetes Service for internal cluster access
service:
  type: LoadBalancer # Use LoadBalancer instead of ALB ingress
  port: 80 # Service port 
  targetPort: 8000 # Must match workload.ports.containerPort

# Standard Ingress (alternative to HTTPRoute)
# Set to 'false' if relying on the HTTPRoute/Istio setup above
ingress:
  host: ""
  enabled: false # Disable ingress, use LoadBalancer service instead
  path: "/api"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/group.name: go-micro-app

serviceAccount:
  create: false

imagePullSecrets:
  - name: ecr-secret